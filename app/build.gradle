apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }



    defaultConfig {
        applicationId "cl.ingennia.vocablia"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        debug {
            File signingPropFile = rootProject.file('signing.properties')
            if (signingPropFile.exists()) {
                Properties signingProp = new Properties()
                signingProp.load(signingPropFile.newDataInputStream())
                storeFile file(signingProp.get("debug.storeFile"))
                storePassword signingProp.get("debug.storePassword")
                keyAlias signingProp.get("debug.keyAlias")
                keyPassword signingProp.get("debug.keyPassword")
            } else if (System.getenv('DEBUG_KEYSTORE_BASE64') != null) {
                storeFile decodeKeyStoreFileFromBase64Env('DEBUG_KEYSTORE_BASE64')
                storePassword System.getenv('DEBUG_KEYSTORE_PASSWORD')
                keyAlias System.getenv('DEBUG_KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('DEBUG_KEYSTORE_KEY_PASSWORD')
            }
        }
        release {
            File signingPropFile = rootProject.file('signing.properties')
            if (signingPropFile.exists()) {
                Properties signingProp = new Properties()
                signingProp.load(signingPropFile.newDataInputStream())
                storeFile file(signingProp.get("release.storeFile"))
                storePassword signingProp.get("release.storePassword")
                keyAlias signingProp.get("release.keyAlias")
                keyPassword signingProp.get("release.keyPassword")
            } else if (System.getenv('RELEASE_KEYSTORE_BASE64') != null) {
                storeFile decodeKeyStoreFileFromBase64Env('RELEASE_KEYSTORE_BASE64')
                storePassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
                keyAlias System.getenv('RELEASE_KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('RELEASE_KEYSTORE_KEY_PASSWORD')
            }
        }
    }
    buildTypes {
        debug {
            if (rootProject.file('signing.properties').exists()
                    || System.getenv('DEBUG_KEYSTORE_BASE64') != null) {
                signingConfig signingConfigs.debug
            }
        }
        release {
            if (rootProject.file('signing.properties').exists()
                    || System.getenv('RELEASE_KEYSTORE_BASE64') != null) {
                signingConfig signingConfigs.release
            }

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }



    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:design:23.1.0'
    compile 'com.android.support:appcompat-v7:23.1.1'

    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
    compile 'com.squareup.retrofit:converter-jackson:2.0.0-beta2'

    compile 'io.reactivex:rxjava:1.0.10'
    compile 'io.reactivex:rxandroid:1.1.0'

    compile 'com.squareup.okhttp:logging-interceptor:2.6.0'
    compile 'com.squareup.okhttp:okhttp:2.6.0'

    compile 'com.j256.ormlite:ormlite-core:4.48'
    compile 'com.j256.ormlite:ormlite-android:4.48'

    compile 'com.jakewharton:butterknife:7.0.1'


    compile 'org.apache.commons:commons-lang3:3.1'

    compile 'com.google.dagger:dagger:2.0'

    compile 'com.squareup.picasso:picasso:2.5.2'

    apt 'com.google.dagger:dagger-compiler:2.0'

    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile 'com.jakewharton.timber:timber:4.1.0'

    compile 'net.danlew:android.joda:2.9.1'

    compile 'com.squareup.picasso:picasso:2.5.2'
}


def decodeKeyStoreFileFromBase64Env(String name) {
    String keyStoreBase64 = System.getenv(name)
    if (keyStoreBase64 == null) return null
    File tempKeyStoreFile = File.createTempFile("tmp_ks_", ".jks", File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempKeyStoreFile)
        fos.write(keyStoreBase64.decodeBase64())
        fos.flush()
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    return tempKeyStoreFile
}